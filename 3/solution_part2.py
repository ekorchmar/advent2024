import sys
sys.setrecursionlimit(15_000) # Default is not enough, and we need recursion!

input_stream = list(open("input.txt","r").read()); state = [True]; current, mults = [], []; build_number = lambda: (out := int("".join(current))) and current.clear() or out; check_ending = lambda ending: bool(input_stream[0] == ending) and bool(input_stream.pop(0)); find_number = lambda ending: (current.append(input_stream.pop(0)) or find_number(ending)) if input_stream[0].isdigit() else build_number() * int(check_ending(ending)); try_find_number = lambda ending: find_number(ending) or 0; find_in_brackets = lambda: (first := try_find_number(",")) and first and mults.append(first * try_find_number(")") * state[-1]); cut_mul = lambda: [input_stream.pop(0) for _ in "mul("]; try_do = lambda: (input_stream[:4] == list("do()")) and state.append(True); try_dont = lambda: (input_stream[:7] == list("don't()")) and state.append(False); skip = lambda: (try_do()) or (try_dont()) or input_stream.pop(0); find_mul = lambda: ((cut_mul() and find_in_brackets()) if input_stream[:4] == list("mul(") else skip()); recurse_func = lambda fn: (fn() or True) and input_stream and recurse_func(fn); recurse_func(find_mul); print(sum(mults))
